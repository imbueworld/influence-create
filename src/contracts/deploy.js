import { ethers } from "ethers";
import MetaData from "../../bin/src/contracts/ImbueToken.json";
(async () => {
  try {
    console.log("Running deployWithEthers script...");

    const contractName = "Storage"; // Change this for other contract
    const constructorArgs = []; // Put constructor args (if any) here for your contract

    // Note that the script needs the ABI which is generated from the compilation artifact.
    // Make sure contract is compiled and artifacts are generated
    const artifactsPath = `browser/contracts/artifacts/${contractName}.json`; // Change this for different path

    const metadata = MetaData;
    // 'web3Provider' is a remix global variable object
    const signer = new ethers.providers.Web3Provider(
      window.ethereum,
      "any"
    ).getSigner();

    let factory = new ethers.ContractFactory(
      metadata.abi,
      metadata.data.bytecode.object,
      signer
    );

    let contract = await factory.deploy(...constructorArgs);

    console.log("Contract Address: ", contract.address);

    // The contract is NOT deployed yet; we must wait until it is mined
    await contract.deployed();
    console.log("Deployment successful.");
  } catch (e) {
    console.log(e.message);
  }
})();

/*
const ethers = require('ethers');
const fs = require('fs');
(async () => {
  // Deploy the contract to Ethereum test network - Ropsten
  const provider = ethers.providers.getDefaultProvider('ropsten')

  // Use your wallet's private key to deploy the contract
  const privateKey = 'YOUT_PRIVATE_KEY'
  const wallet = new ethers.Wallet(privateKey, provider)

  // Read the contract artifact, which was generated by Remix
  const metadata = JSON.parse(fs.readFileSync('contract.json').toString())

  // Set gas limit and gas price, using the default Ropsten provider
  const price = ethers.utils.formatUnits(await provider.getGasPrice(), 'gwei')
  const options = {gasLimit: 100000, gasPrice: ethers.utils.parseUnits(price, 'gwei')}

  // Deploy the contract
  const factory = new ethers.ContractFactory(metadata.abi, metadata.data.bytecode.object, wallet)
  const contract = await factory.deploy(options)
  await contract.deployed()
  console.log(`Deployment successful! Contract Address: ${contract.address}`)
})()
 */
